#!/usr/bin/env python
#

from __future__ import print_function
import numpy as np
import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import String
from markers import *
from lab3functions import *
global press_key
press_key = "esta es una impresion"

def callback(msg):
    global press_key
    press_key = msg.data


if __name__ == '__main__':


    rospy.Subscriber("/keys", String, callback) 
    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])







    # Joint names
    jnames = ("joint1", "joint2", "joint3","joint4_new", "joint4", "joint5", "joint6")

    # Desired position
    T=fkine_irb([0.025,0,0.075,0.075,0,0,0.1])
    
    #xd = T[0:3,3]
    xd = np.array([0.2,1,1.3])
    # Initial configuration
    q0  = np.array([0, 0, 0, 0, 0, 0, 0])
    # Resulting initial position (end effector with respect to the base link)
    T = fkine_irb(q0)
    pos = T
    Jgeo=jacobian_geom(q0)
    # Red marker shows the achieved position
    bmarker_current.xyz(pos)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 50
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = q0
    # Main loop
    k=5


    
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------
       
        
        jstate.header.stamp = rospy.Time.now()
        pos=T[0:3,3]
	
        J = jacobian_position(q)
        Jinv = np.linalg.pinv(J)
        e=pos-xd
        epunto=-k*e
        qpunto=Jinv.dot(epunto)
	Jgeo=jacobian_geom(q0)
        n=np.linalg.matrix_rank(Jgeo)
        q = q+dt*qpunto
        det=np.linalg.det(Jgeo.dot(np.transpose(Jgeo))) 
        det=np.round(det, decimals=8, out=None)
        
      
	if q[0]<-2.62:
		
		q[0]=-2.62
		
	if q[0]>2.62:
		q[0]=1.40 

	if q[1]<-1.40:
		
		q[1]=-1.40
		
	if q[1]>1.40:
		q[1]=1.40

	if q[2]<-1.31:
		q[2]=-1.31
		
	if q[2]>1.31:
		q[2]=1.31
	        
	if q[3]<-0.44:
		q[3]=-0.44
		
	if q[3]>0.44:
		q[3]=0.44

	if q[4]<-6:
		
		q[4]=-6
		
	if q[4]>6:
		q[4]=6

        if q[5]<-6:
		
		q[5]=-6
		
	if q[5]>6:
		q[5]=6

        if q[6]<-6:
		
		q[6]=-6
		
	if q[6]>6:
		q[6]=6

                
	T = fkine_irb(q)
        # -----------------------------

    
        # Log values                                                      
        fxcurrent.write(str(pos[0])+' '+str(pos[1]) +' '+str(pos[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+str(q[4])+" "+str(q[5])+"\n"+str(q[6])+"\n")
    
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(pos)
        # Wait for the next iteration
	rate.sleep()
                    
    print('ending motion ...')

    fxcurrent.close()
    fxdesired.close()
    fq.close()
