#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import String
from markers import *
from lab3functions import *
global press_key
press_key = "0"

def callback(msg):

    global press_key
    press_key = msg.data

rospy.init_node("joint_state_publisher")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
rospy.Subscriber("/keys", String, callback) 

bmarker      = BallMarker(color['RED'])
bmarker_des  = BallMarker(color['GREEN'])

# Joint names
jnames = ("joint1", "joint2", "joint3","joint4_new", "joint4", "joint5", "joint6")

# Desired position
xd = np.array([0.5, -0.4, 2])
# Initial configuration
q0 = np.array([0, 0, 0, 0, 0, 0,0])
# Inverse kinematics
q = ikine_ur5(xd, q0)
f = fkine_irb(q)
xact=f[0:3,3]

# Resulting position (end effector with respect to the base link)
T = fkine_irb(q)


# Red marker shows the achieved position
bmarker.xyz(T[0:3,3])
# Green marker shows the desired position
bmarker_des.xyz(xd)

# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Asignar valores al mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(200)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message

    jstate.position = q
    pub.publish(jstate)
    bmarker.publish()
    bmarker_des.publish()
    # Wait for the next iteration
    rate.sleep()
